import numpy as np
import cv2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import img_to_array, load_img
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from twilio.rest import Client

# 1. CNN Model za detekciju oštećenja
def create_cnn_model():
    model = Sequential()
    
    # Konvolucioni slojevi
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Flatten())
    
    # Fully connected slojevi
    model.add(Dense(64, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))  # binarna klasifikacija: oštećenje / bez oštećenja
    
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# 2. Funkcija za treniranje modela (prazno mesto za dataset)
def train_model(model):
    # Pretpostavi da ćeš dodati slike u /data/train i /data/validation folderima
    datagen = ImageDataGenerator(rescale=1./255)

    train_generator = datagen.flow_from_directory(
        'data/train',  # Ovdje dodaj trenirane slike
        target_size=(128, 128),
        batch_size=32,
        class_mode='binary')

    validation_generator = datagen.flow_from_directory(
        'data/validation',  # Ovdje dodaj validacione slike
        target_size=(128, 128),
        batch_size=32,
        class_mode='binary')

    model.fit(train_generator, epochs=10, validation_data=validation_generator)

# 3. Funkcija za predikciju oštećenja na slici
def detect_damage(image_path, model):
    img = load_img(image_path, target_size=(128, 128))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    prediction = model.predict(img_array)
    return prediction[0][0]  # Binarni izlaz: 0 (bez oštećenja), 1 (oštećenje)

# 4. Funkcija za slanje upozorenja (korišćenje Twilio servisa)
def send_alert(phone_number, message):
    # Twilio informacije (unesi svoje podatke)
    account_sid = 'TWILIO_ACCOUNT_SID'
    auth_token = 'TWILIO_AUTH_TOKEN'
    client = Client(account_sid, auth_token)

    alert_message = client.messages.create(
        body=message,
        from_='+Twilio_Number',
        to=phone_number)

    print(f"Upozorenje poslato na: {phone_number}")

# 5. Glavni deo programa
if __name__ == '__main__':
    # Kreiranje CNN modela
    model = create_cnn_model()

    # Treniraćeš model (unesi slike u 'data/train' i 'data/validation')
    # train_model(model)

    # Predikcija na slici (unesi putanju do slike)
    image_path = 'path_to_image.jpg'  # Ovo promeni sa pravom slikom
    damage_detected = detect_damage(image_path, model)

    if damage_detected > 0.5:
        print("Oštećenje detektovano!")
        send_alert('+123456789', 'Oštećenje detektovano na slici!')  # Zameniti sa pravim brojem
    else:
        print("Nema oštećenja.")
